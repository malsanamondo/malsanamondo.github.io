<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categoría: GNU/Linux | Malsana Mondo]]></title>
  <link href="http://malsanamondo.github.io/categorias/gnu-slash-linux/atom.xml" rel="self"/>
  <link href="http://malsanamondo.github.io/"/>
  <updated>2014-05-01T12:53:23+02:00</updated>
  <id>http://malsanamondo.github.io/</id>
  <author>
    <name><![CDATA[Malsana Mondo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi: montar un servidor web en casa (4)]]></title>
    <link href="http://malsanamondo.github.io/2014/04/raspberry-pi-montar-un-servidor-web-en-casa-4/"/>
    <updated>2014-04-27T23:03:21+02:00</updated>
    <id>http://malsanamondo.github.io/2014/04/raspberry-pi-montar-un-servidor-web-en-casa-4</id>
    <content type="html"><![CDATA[<p><a href="https://malsanamondo.github.io/categorias/raspberry-pi/">Anteriormente</a> ya hemos instalado y configurado el sistema operativo de la Raspberry Pi. En esta entrada veremos cómo instalar el servidor web y Octopress para poder escribir y gestionar un blog alojado en nuestra Raspberry Pi.</p>

<p>También hemos comentado que a diferencia de otros CMS Octopress ofrece el contenido en HTML estático sin utilizar una base de datos, por tanto no necesitamos software que las gestione y muestre el contenido dinámico (MySQL, PHP, PhpMyAdmin, etc.). Necesitaremos solamente <a href="https://es.wikipedia.org/wiki/Nginx">Nginx</a> como servidor web, y Ruby-Dev como dependencias necesarias para Octopress.</p>

<!-- more -->


<p>Los servidores web más usados son Apache, lighttpd y Nginx, y es con este último con el que vamos a trabajar por ser rápido y soportar muchas conexiones simultáneas, lo que nos interesa ya que nuestra Raspberry Pi es un ordenador de características básicas y de esta forma le sacamos el máximo partido.</p>

<p>Nos conectamos por SSH e instalamos algunos paquetes necesarios para el funcionamiento de Octopress escribiendo:</p>

<pre><code>$ sudo apt-get install ruby ruby-dev
</code></pre>

<p>Instalamos Nginx:</p>

<pre><code>$ sudo apt-get install nginx-full
</code></pre>

<p>Instalamos GIT (es posible que ya lo tengas instalado):</p>

<pre><code>$ sudo apt-get install git
</code></pre>

<p>Clonamos el repositorio oficial de Octopress en el directorio <em>home</em> de nuestra Raspberry Pi. Con el siguiente comando lo clonaremos en la carpeta <em>octopress</em>:</p>

<pre><code>$ git clone git://github.com/imathis/octopress.git octopress
</code></pre>

<p>Nos situamos dentro de la carpeta que acabamos de crear con:</p>

<pre><code>$  cd octopress
</code></pre>

<p>y allí dentro debemos instalar <em>bundle</em>:</p>

<pre><code>$ sudo gem install bundle
</code></pre>

<p>Instalamos Octopress bundle:</p>

<pre><code>$ bundle install
</code></pre>

<p>Ya podemos salir de la carpeta <em>octopress</em> con:</p>

<pre><code>$ cd
</code></pre>

<p>Creamos la carpeta <em>www</em> dentro de <em>/var/</em>:</p>

<pre><code>$ sudo mkdir /var/www/
</code></pre>

<p>Cambiamos los permisos al directorio:</p>

<pre><code>$ sudo chmod 777 -R /var/www/
</code></pre>

<p>Editamos el archivo de configuración de Nginx:</p>

<pre><code>$ sudo nano /etc/nginx/sites-enabled/default
</code></pre>

<p>En este archivo hay una parte que mostrará algo parecido a esto:</p>

<pre><code>server {
        #listen   80; ## listen for ipv4; this line is default and implied
        #listen   [::]:80 default_server ipv6only=on; ## listen for ipv6

        root /usr/share/nginx/www/; #change this web root
        index index.html index.htm;

        # Make site accessible from http://localhost/
        server_name localhost;
</code></pre>

<p>y debemos editar esa parte para que contenga esto otro:</p>

<pre><code>server {
        #listen   80; ## listen for ipv4; this line is default and implied
        #listen   [::]:80 default_server ipv6only=on; ## listen for ipv6

        root /var/www; #this is the new web root
        index index.html index.htm;

        # Make site accessible from http://localhost/
        server_name localhost;
</code></pre>

<p>Iniciamos Nginx:</p>

<pre><code>$ sudo /etc/init.d/nginx start
</code></pre>

<p>Volvemos a entrar en la carpeta <em>octopress</em> y editamos el archivo <em>Rakefile</em> que se encuentra dentro con:</p>

<pre><code>$ cd octopress

$ sudo nano Rakefile
</code></pre>

<p>En este archivo hay una parte donde se muestra esto:</p>

<pre><code>ssh_user       = "user@domain.com"
ssh_port       = "22"
document_root  = "~/website.com/"
rsync_delete   = false
rsync_args     = ""  # Any extra arguments to pass to rsync
deploy_default = "rsync"
</code></pre>

<p>y debemos editarlo para que sea:</p>

<pre><code>ssh_user       = "pi@you-pi-ipaddress" # the pi@and ip-address of your Raspberry Pi
ssh_port       = "22"
document_root  = "/var/www/" ## the web root where octopress public will be placed
rsync_delete   = false
rsync_args     = ""  # Any extra arguments to pass to rsync
deploy_default = "rsync" #using rsync to deploy octopress
</code></pre>

<p>Guardamos con Ctrl+O, ENTER y Ctrl+X.</p>

<p>Siempre dentro de la carpeta <em>octopress</em> instalamos el tema de Octopress:</p>

<pre><code>$ sudo bundle exec rake install
</code></pre>

<p>y después:</p>

<pre><code>$ bundle exec rake gen_deploy
</code></pre>

<p>Desde ahora se puede visitar vuestro blog en la URL <a href="http://loquesea.dnsdynamic.com">http://loquesea.dnsdynamic.com</a> (vuestro dominio) desde cualquier sitio siempre que tengáis vuestro servidor activo, es decir, que tengáis la Raspberry encendida y conectada al router en la misma red local para la cual la hemos configurado. Si queréis mover el servidor a otro lugar debéis cambiar las IP por las nuevas en los archivos de configuración en la Raspberry Pi y también en vuestro dominio de DNSdynamic.org.</p>

<p>Más adelante escribiré una entrada donde explicaré cómo configurar y añadir contenido en Octopress.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi: montar un servidor web en casa (3)]]></title>
    <link href="http://malsanamondo.github.io/2014/04/raspberry-pi-montar-un-servidor-web-en-casa-3/"/>
    <updated>2014-04-25T17:26:05+02:00</updated>
    <id>http://malsanamondo.github.io/2014/04/raspberry-pi-montar-un-servidor-web-en-casa-3</id>
    <content type="html"><![CDATA[<p>En la <a href="http://malsanamondo.github.io/2014/04/raspberry-pi-montar-un-servidor-web-en-casa-1/">primera</a> y <a href="http://malsanamondo.github.io/2014/04/raspberry-pi-montar-un-servidor-web-en-casa-2/">segunda</a> parte de este manual hemos visto qué es la Raspberry Pi y cómo se instala Raspbian en la tarjeta SD. En esta tercera parte configuraremos el sistema operativo para que podamos acceder a él desde cualquier parte.</p>

<p>Después de copiar Raspbian en la tarjeta SD podemos comenzar la configuración. En este punto necesitamos además de la Raspberry Pi y de la SD, el alimentador micro-usb (sirve cualquier cargador micro-usb de móvil de al menos 700 mA), un cable RJ-45 (ethernet) para conectarla al router y un ordenador desde el cual controlaremos nuestra Raspberry Pi. También debemos tener acceso a la configuración del router.</p>

<!-- more -->


<h2>Primer arranque y configuración</h2>

<p>Introducimos la tarjeta SD en la Raspberry Pi, la conectamos al router y le conectamos el alimentador. La Raspberry Pi no dispone de ningún botón de encendido, basta conectarla a la corriente y automáticamente se encenderá. La Raspberry Pi se apaga correctamente con el comando:</p>

<pre><code>$ sudo shutdown -h now
</code></pre>

<p>y la señal que muestra cuando realmente se ha apagado es un solo led de color rojo, en ese momento podemos desconectar el cable de alimentación.</p>

<p>Para continuar debemos descubrir la IP de la Raspberry Pi en la red local accediendo a la configuración del router. Normalmente se accede escribiendo la IP 192.168.1.1 en el navegador de un dispositivo conectado en la misma red local que la Raspberry Pi, e introduciendo el usuario y la contraseña que suelen estar indicados en la carcasa del propio router (es aconsejable también cambiar la contraseña de administrador del router). Una vez identificada la IP (el nombre por defecto es &ldquo;raspberrypi+IP&rdquo;) podemos empezar la configuración a través de SSH.</p>

<p>Explicaré como hacerlo desde la distribución Debian Wheezy de GNU/Linux, para hacerlo desde Windows puedes encontrar información <a href="http://comiendorasps.blogspot.com.es/2013/04/conectandonos-la-raspberry-mediante-ssh.html">aquí</a> a través de <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">Putty</a>.</p>

<p>Si vuestra distribución GNU/Linux no tiene instalado un cliente SSH podéis encontrar información sobre cómo instalarlo <a href="http://www.ite.educacion.es/formacion/materiales/85/cd/linux/m5/instalacin_de_servidor_de_ssh.html">aquí</a>.</p>

<p>En la consola escribimos como root:</p>

<pre><code># ssh pi@192.168.1.5
</code></pre>

<p>cambiando <em>192.168.1.5</em> por la IP de vuestra Raspberry Pi, se mostrará un aviso preguntando si queremos añadir esa IP a los host conocidos y escribimos <em>yes</em>, volvemos a escribir <code># ssh pi@192.168.1.5</code> y pedirá la contraseña que por defecto es <em>raspberry</em>, acto seguido tendréis control total sobre ella siempre que estéis en la misma red local (el acceso a través de SSH desde el exterior se explicará más adelante).</p>

<p>Si no se abre automáticamente la herramienta de configuración escribimos en la consola:</p>

<pre><code>$ sudo raspi-config
</code></pre>

<p>Se abrirá una ventana con algunas opciones principales (podemos volver a abrirla en cualquier momento con el mismo comando). Para moverse por esta ventana utilizaremos las teclas de dirección y la tecla TAB para saltar de campos, para aceptar la tecla INTRO, para cancelar la tecla ESC y para seleccionar o desmarcar la barra de espacio. De las opciones que aparecen las que nos interesan ahora son:</p>

<ul>
<li><strong>Expandir el sistema</strong>: para que Raspbian ocupe todo el espacio de la tarjeta.</li>
<li><strong>Cambio de contraseña</strong>: por defecto el usuario es <em>pi</em> y la contraseña es <em>raspberry</em>. Por seguridad cambiamos la contraseña. Nos pedirá dos veces que escribamos la nueva contraseña.</li>
<li><strong>Opciones de internacionalización</strong>: configurar idioma, localización, teclado, etc. En idioma desmarcamos (con la barra de espacio) <em>en_GB.UTF-8 UTF-8</em> y seleccionamos <em>es_ES UTF-8 UTF-8</em> (si lo queréis en castellano), volvemos a seleccionar <em>es_ES.UTF-8</em> en configuración de sistema y cambiamos la zona horaria. No es necesario configurar ni la distribución ni el idioma del teclado porque se toma automáticamente del ordenador huésped (si decidimos conectar un teclado USB a la Raspberry Pi necesitaremos configurarlo). En las siguientes opciones no hace falta cambiar nada.</li>
<li><strong>Opciones avanzadas</strong>: si queremos podemos cambiar el nombre del dispositivo (hostname) dentro de la red local.</li>
</ul>


<p>Una vez terminada la configuración inicial reiniciamos. Cuando no muestre automáticamente la opción de reiniciar, lo haremos con:</p>

<pre><code>$ sudo reboot
</code></pre>

<p>volvemos a conectarnos por SSH (no olvidéis cambiar la IP por la vuestra) con:</p>

<pre><code># ssh pi@192.169.1.5
</code></pre>

<p>y nos pedirá la contraseña que previamente habremos cambiado.</p>

<p>Por defecto Raspbian arranca en modo consola, sin modo gráfico (para nuestro servidor web no nos hace falta). Podéis arrancar el modo gráfico en cualquier momento con el comando:</p>

<pre><code>$ startx
</code></pre>

<p>y podéis configurarlo para que arranque en modo gráfico por defecto escribiendo:</p>

<pre><code>$ sudo raspi-config
</code></pre>

<p>cambiando la opción correspondiente en <em>Activar inicio en modo escritorio</em>.</p>

<h2>IP fija dentro de nuestra red local</h2>

<p>Antes hemos averiguado la IP de la Raspberry Pi, pero debemos saber que el router puede cambiar esa IP cuando conectamos o desconectamos el dispositivo. Para evitar tener que averiguar la IP asignada cada vez que cambie (y sobre todo para acceder desde el exterior) debemos asignarle manualmente una IP fija dentro de nuestra red local. Para hacerlo escribimos:</p>

<pre><code>$ sudo nano /etc/network/interfaces
</code></pre>

<p>lo que abrirá un archivo en el cual debemos modificar una línea y añadir tres nuevas, dejando el resto del archivo tal y como está. En la línea:</p>

<pre><code>iface eth0 inet dhcp
</code></pre>

<p>debemos cambiar <em>dhcp</em> por <em>static</em> y añadir debajo tres líneas, resultando:</p>

<pre><code>iface eth0 inet static
address 192.168.1.9
netmask 255.255.255.0
gateway 192.168.1.1
</code></pre>

<p>donde <em>192.168.1.9</em> es la IP fija que hemos elegido para la Raspberry Pi, y gateway <em>192.168.1.1</em> es la IP desde la cual accedemos a configurar nuestro router.
Guardamos los cambios en el documento y lo cerramos con Ctrl+O, ENTER y Ctrl+X.</p>

<p>Reiniciamos con:</p>

<pre><code>$ sudo reboot
</code></pre>

<p>y comprobamos desde la configuración de nuestro router que le ha sido asignada la IP que queríamos.</p>

<p>Ahora cuando queramos conectarnos por SSH con:</p>

<pre><code># ssh pi@192.168.1.9
</code></pre>

<p>nos avisará que podemos estar sufriendo un ataque <em>man in the middle</em>:</p>

<pre><code>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the ECDSA key sent by the remote host is
28:ab:4a:df:05:0e:4b:21:95:01:63:71:c1:04:90:91.
Please contact your system administrator.
Add correct host key in /home/user/.ssh/known_hosts to get rid of this message.
Offending RSA key in /home/user/.ssh/known_hosts:3
Password authentication is disabled to avoid man-in-the-middle attacks.
Keyboard-interactive authentication is disabled to avoid man-in-the-middle attacks.
X11 forwarding is disabled to avoid man-in-the-middle attacks.
Permission denied (publickey,password).
</code></pre>

<p>No hay de qué preocuparse, al haber cambiado la IP del dispositivo remoto salta esta alerta de seguridad con las claves cifradas entre nuestro ordenador y nuestra Raspberry Pi. Para solucionarlo debemos escribir el siguiente comando:</p>

<pre><code># ssh-keygen -R 192.168.1.9
</code></pre>

<p>de esa forma se regenera una nueva clave, y ya podemos acceder con:</p>

<pre><code># ssh pi@192.168.1.9
</code></pre>

<p>y nos pedirá confirmación, escribimos <strong>yes</strong>.</p>

<p>Una vez dentro escribimos uno a uno estos comandos:</p>

<pre><code>$ sudo apt-get update


$ sudo apt-get upgrade
</code></pre>

<p>y esperamos el tiempo necesario para que el sistema se actualice. Si hay paquetes para descargar nos pedirá confirmación para la descarga e instalación, a lo cual contestamos con &ldquo;<strong>S</strong>&rdquo;. Es conveniente repetir estos comandos cada cierto tiempo para asegurar el óptimo funcionamiento del sistema operativo.</p>

<h2>Acceder a la Raspberry Pi desde el exterior de la red local</h2>

<p>Al conectarnos a Internet desde nuestras casas los proveedores (<a href="https://es.wikipedia.org/wiki/Proveedor_de_servicios_de_Internet">ISP</a>) nos asignan una dirección IP pública que normalmente es dinámica. Esto quiere decir que cambia cada vez que se apaga y enciende el router, algo parecido a lo que pasa en una red local con las direcciones IP (en este caso IP privadas) de los dispositivos cada vez que se conectan a ella.</p>

<p>No se puede acceder al contenido de un servidor que está detrás de una IP dinámica si antes no hemos instalado un cliente DNS que actualice automáticamente la IP pública asociándola a un dominio. Una vez hecho esto se puede acceder desde cualquier lugar a nuestro servidor web a través de un nombre de dominio, sea cual sea la IP pública que tenga.</p>

<p>Vamos a utilizar el servicio que ofrece <a href="https://www.dnsdynamic.org/">dnsdynamic.org</a>. Nos registramos con una dirección email y una contraseña y esperamos a que nos llegue un email con el enlace de confirmación. Una vez hecha la identificación pulsamos en <em>Add</em> y elegimos el dominio que queramos si está disponible (realmente será un subdominio tipo <em>loquesea.dnsdynamic.com</em>), y le asociamos nuestra IP pública (lo hará automáticamente) y guardamos los cambios. Si no sabes cuál es tu IP pública la puedes averiguar <a href="http://vermiip.es/">aquí</a>.</p>

<p>Ahora vamos a instalar el cliente en la Raspberry Pi, escribimos:</p>

<pre><code>$ sudo apt-get install ddclient
</code></pre>

<p>nos preguntará si queremos instalar los paquetes, contestaremos <strong>SI</strong>, nos pregunta el servidor DNS y elegimos <strong>OTRO</strong>, escribimos <strong><a href="http://dnsdynamic.org**,">http://dnsdynamic.org**,</a> en protocolo de actualización de DNS elegimos </strong>dyndns2<strong>, </strong>ejecutar el cliente cuando establezca una conexión PPP y contestamos <strong>NO</strong>, si lo queremos ejecutar como demonio y contestamos <strong>SI</strong>. A partir de aquí podemos marcar lo que queramos porque en el siguiente paso sobrescribiremos todo.</p>

<p>Escribimos:</p>

<pre><code>$ sudo nano /etc/ddclient.conf
</code></pre>

<p>y reemplazamos todo su contenido por:</p>

<pre><code>#
# Configuration file for ddclient generated by debconf
#
# /etc/ddclient.conf
daemon=300                         # check every 300 seconds
syslog=yes                         # log update msgs to syslog
mail=root                          # mail all msgs to root
mail-failure=root                  # mail failed update msgs to root
pid=/var/run/ddclient.pid          # record PID in file.
ssl=yes                            # use ssl-support.
use=web, web=myip.dnsdynamic.com   # get ip from server.
server=www.dnsdynamic.org          # default server
login=YOUR-LOGIN                   # your login
password=YOUR-PASSWORD             # your password
server=www.dnsdynamic.org,         \
protocol=dyndns2                   \
YOUR-DOMAIN
</code></pre>

<p>y cambiamos <em>YOUR-LOGIN</em>, <em>YOUR-PASSWORD</em> y <em>YOUR-DOMAIN</em> por vuestro nombre de usuario, vuestra contraseña y vuestro dominio registrado de dnsdynamic.org. Si queréis podéis cambiar también el tiempo de comprobación de IP, en este caso 300 segundos (5 minutos).
Guardamos el archivo con Ctrl+O, ENTER y Ctrl+X (en cualquier momento se puede volver a configurar el cliente con el comando anterior).</p>

<p>y reiniciamos con:</p>

<pre><code>$ sudo reboot
</code></pre>

<p>Para que todo funcione debemos configurar nuestro router redirigiendo los puertos 80 (HTTP) y 22 (SHH) hacia la IP privada de nuestra Raspberry Pi, en el ejemplo que estamos siguiendo 192.168.1.9. Cada router se configura de forma diferente, si tenéis dificultades para abrir los puertos buscad en Internet documentación de la marca y modelo de vuestro router.</p>

<p>En principio si se quiere utilizar un nombre de dominio propio contratado (por ejemplo: loquesea.net) para que apunte a vuestra Raspberry Pi, se puede hacer añadiendo un registro CNAME en los DNS de loquesea.net que apunte hacia el dominio registrado en dnsdynamic, aunque debo decir que yo no lo he logrado.</p>

<p>En la próxima y última entrada de este manual instalaremos y configuraremos el servidor web y Octopress.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi: montar un servidor web en casa (2)]]></title>
    <link href="http://malsanamondo.github.io/2014/04/raspberry-pi-montar-un-servidor-web-en-casa-2/"/>
    <updated>2014-04-17T12:22:14+02:00</updated>
    <id>http://malsanamondo.github.io/2014/04/raspberry-pi-montar-un-servidor-web-en-casa-2</id>
    <content type="html"><![CDATA[<p>Antes de continuar con este manual recomiendo la lectura de la <a href="http://malsanamondo.github.io/2014/04/raspberry-pi-montar-un-servidor-web-en-casa-1/">primera parte</a>. A continuación instalaremos el sistema operativo de la Raspberry Pi.</p>

<p>La Raspberry Pi no tiene disco duro ni SSD, en su lugar utiliza una tarjeta SD para almacenar los datos y es allí donde debemos instalar el sistema operativo.</p>

<h3>Sistemas operativos</h3>

<p>Existen varios <a href="http://www.raspberrypi.org/downloads/">sistemas operativos para la Raspberry Pi</a>, muchos de ellos distribuciones <a href="https://es.wikipedia.org/wiki/GNU/Linux">GNU/Linux</a>. <a href="http://bitelia.com/2013/12/raspberry-pi-distribuciones-lnux">Aquí</a> muestran algunos de ellos. Nuestro servidor lo montaremos con <a href="https://es.wikipedia.org/wiki/Raspbian">Raspbian</a> (una versión de la distribución Debian Wheezy del sistema operativo GNU/Linux).</p>

<!-- more -->


<h3>Instalación</h3>

<p>Hay varias opciones:</p>

<ul>
<li><p><strong>NOOBS</strong>: es el instalador oficial que se aconseja para principiantes. De hecho su nombre es un acrónimo de <em>New Out Of Box Software</em> y un juego de palabras con <em>noob</em> (novato en inglés). Se descomprime su contenido (1 GB) en la tarjeta SD, se introduce en la Raspberry Pi y al encenderla aparece un menú en el que podemos elegir el sistema operativo a instalar.</p></li>
<li><p><strong>Berryboot</strong>: es otro instalador. Se descomprime su contenido (unos 30 MB) en la tarjeta SD, se introduce en la Raspberry Pi conectada a Internet por cable y al encenderla aparece un menú en el que podemos elegir el sistema operativo a instalar.</p></li>
</ul>


<p>Aunque estos instaladores presentan algunas ventajas (automatización, instalación de varios sistemas operativos en la misma tarjeta SD, clonación de particiones, etc.), nuestro servidor lo montaremos sin instalador, copiando directamente Raspbian en la tarjeta SD.</p>

<p><img src="/images/raspbian_logo.png" alt="Logo Raspbian" /></p>

<p>Descargamos la imagen de la última versión disponible desde <a href="http://www.raspberrypi.org/downloads/">aquí</a>, descomprimimos el archivo <code>.zip</code> y obtenemos otro archivo <code>.img</code>, el cual debemos copiar en la tarjeta SD. Explicaré el método para hacerlo desde un ordenador con sistema operativo GNU/Linux (Debian Wheezy) por ser el método que conozco, para hacerlo desde Windows encontraréis información <a href="http://openwebcms.es/raspberry-pi/como-instalar-raspbian-en-raspberry-pi/">aquí</a>.</p>

<p>En GNU/Linux:</p>

<p>Lo primero es identificar el nombre asignado a la tarjeta SD. Hay que tener mucho cuidado de no equivocarse ya que puedes destrozar el sistema operativo del ordenador, guíate por la capacidad de almacenamiento de la tarjeta (mínimo 4 GB).</p>

<ul>
<li><p><strong>Con GParted</strong>: identifícate como root y averigua el nombre asignado a la tarjeta SD, desmonta, selecciona y elimina las particiones existentes (clic derecho + opción correspondiente) y aplicar los cambios.</p></li>
<li><p><strong>Desde la terminal</strong>: identifícate como root y averigua el nombre asignado a la tarjeta SD con:</p>

<pre><code>  # df -h
</code></pre></li>
</ul>


<p>o:</p>

<pre><code># fdisk -l
</code></pre>

<p>Encontraréis que tiene asignado algo como /dev/sdb1 o /dev/mmcblk0p1, y si la SD tiene más particiones serán nombradas como sdb2, sdb3 y mmcblk0p2, mmcblk0p3 respectivamente. Entonces se desmontan con:</p>

<pre><code># umount /dev/sdb1
</code></pre>

<p>sustituyendo &ldquo;sdb&rdquo; por el nombre de vuestra tarjeta y el &ldquo;1&rdquo; por la partición.</p>

<p>Lo hayamos realizado con uno u otro método, ahora debemos copiar la imagen de Raspbian en la tarjeta SD con el comando:</p>

<pre><code># dd bs=1M if=2014-01-07-wheezy-raspbian.img of=/dev/sdb
</code></pre>

<p>donde &ldquo;2014-01-07-wheezy-raspbian.img&rdquo; es la ruta y nombre de la imagen que hemos descargado y descomprimido (si la tenemos en Descargas será <code>/home/usuario/Descargas/2014-01-07-wheezy-raspbian.img</code>), y &ldquo;/dev/sdb&rdquo; es el nombre asignado a la tarjeta SD (nótese que no lleva número de partición pues queremos copiarla en toda la tarjeta).</p>

<p>Una vez completado el proceso (unos 8 minutos aproximadamente) retiramos la tarjeta y ya podemos introducirla en la Raspberry Pi.</p>

<p>En la siguiente entrada se tratará el primer arranque con Raspbian y su configuración.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi: montar un servidor web en casa (1)]]></title>
    <link href="http://malsanamondo.github.io/2014/04/raspberry-pi-montar-un-servidor-web-en-casa-1/"/>
    <updated>2014-04-16T16:51:26+02:00</updated>
    <id>http://malsanamondo.github.io/2014/04/raspberry-pi-montar-un-servidor-web-en-casa-1</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/RpiFront.jpg" width="300" height="300" title="Raspberry Pi Modelo B" >
Raspberry Pi es un ordenador de placa reducida o placa única (SBC) de bajo costo, desarrollado en Reino Unido por la <a href="http://www.raspberrypi.org/">Fundación Raspberry Pi</a>, con el objetivo de estimular la enseñanza de ciencias de la computación en las escuelas.</p>

<p>Las especificaciones las puedes consultar <a href="https://es.wikipedia.org/wiki/Raspberry_Pi">aquí</a>, y en Internet puedes encontrar fácilmente información de precios (la versión B de 512 MB cuesta unos 36 €), accesorios (cajas, tarjetas SD/SDHC, cables, alimentadores, adaptadores wifi, disipadores, cámaras, etc.), sistemas operativos, usos, proyectos, etc.</p>

<!-- more -->


<p>Una de las utilidades que podemos darle es la de <strong>servidor para alojar nuestro sitio web o blog</strong>, ya sea para experimentar y aprender, para tener mayor control sobre los datos que almacenamos (al no tener que confiar la seguridad de los mismos a las empresas de alquiler de alojamiento web), para tener mayor autonomía (al no depender de otras personas o servicios en la gestión de nuestro sitio), para ahorrarnos el coste del alojamiento web o para todas las razones anteriores a la vez.</p>

<p>Según la propia documentación de la Fundación Raspberry Pi el consumo energético del modelo B es de 3,5 W, y en algunos sitios web que tratan este tema han apuntado que el aumento en la factura de electricidad sería de unos 15 € anuales, teniéndola operativa las 24 horas del día los 365 días del año. No sabría calcular ese aumento y contrastarlo con la cantidad antes mencionada, pero en lo que sí coinciden todas las revisiones es en el <strong>bajo consumo energético</strong> de este ordenador. Más información <a href="http://bokunoshumi.wordpress.com/2012/11/24/convierte-tu-raspberry-pi-en-un-servidor-de-descargas-por-que/" title="Boku no shumi">aquí</a>.</p>

<p>Hay que tener en cuenta que nuestro sitio web estará alojado en un ordenador con unas características básicas, lo que sumado a la velocidad de subida de nuestra conexión a Internet determinarán la velocidad de procesamiento y descarga de nuestras páginas que experimentará quien visite nuestro sitio, además de las visitas simultáneas soportadas. Por ello debemos decantarnos por crear <strong>páginas estáticas para no sobrecargar nuestro servidor</strong>, en nuestro caso instalaremos <a href="http://octopress.org/">Octopress</a>, un <a href="https://es.wikipedia.org/wiki/Sistema_de_gesti%C3%B3n_de_contenidos">CMS</a> que no utiliza una base de datos para almacenar las entradas del blog, las cuales se redactan y almacenan en texto plano con <a href="http://malsanamondo.github.io/2014/04/markdown/">Markdown</a> y que automáticamente se convertirán en HTML estático con un par de órdenes.</p>

<p>Lo que necesitamos para crear un servidor web en nuestra casa es:</p>

<ul>
<li><strong>una Raspberry Pi Modelo B</strong></li>
<li><strong>un alimentador (cargador de móvil) micro USB de al menos 700 mA</strong></li>
<li><strong>una tarjeta SD/SDHC de al menos 4 GB clase 4 o superior</strong></li>
<li><strong>un cable RJ-45 (para conectar la Raspberry Pi al router)</strong></li>
<li><strong>un ordenador (preferiblemente con sistema operativo GNU/Linux, para instalar el sistema operativo en la tarjeta SD, para configurar la Raspberry Pi y controlarla remotamente mediante conexión SSH)</strong></li>
<li><strong>una conexión a Internet con un router y acceso a su configuración</strong></li>
</ul>


<p>Y el proceso completo constará de los siguientes pasos:</p>

<ol>
<li><strong>Instalación y configuración del sistema operativo en la tarjeta SD</strong></li>
<li><strong>Asignación de una IP fija a la Raspberry Pi dentro de la red local</strong></li>
<li><strong>Creación y configuración de una cuenta con DNSdynamic</strong></li>
<li><strong>Instalación y configuración del cliente DNS</strong></li>
<li><strong>Preparativos, instalación y configuración de Octopress</strong></li>
</ol>


<p>En la siguiente entrada veremos como instalar y configurar el sistema operativo en la Raspberry Pi.</p>
]]></content>
  </entry>
  
</feed>
